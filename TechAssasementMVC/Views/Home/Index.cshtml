@model ChartData

@{
	ViewData["Title"] = "TechAssasement";
}

<div>
	<canvas id="barChart"></canvas>
	<canvas id="lineChart" hidden></canvas>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
	const ctx = document.getElementById('barChart');

	var data = @Html.Raw(Json.Serialize(Model));
	console.log(data);
	const chart = new Chart(ctx, {
		type: 'bar',
		data: {
			labels: data.locations.map(x => CleanText(x.country) + '\n' + CleanText(x.city) + '\n' + 'Last update: ' + x.latestUpdate),
			datasets: data.datasets
		},
		options: {
			scales: {
				x: {
					ticks: {
						display: false
					}
				}
			},
			onClick: function (event, elements) {
				if (elements[0]) {

					console.log(elements[0])

					const locationId = data.locations[elements[0].index].id;
					const type = elements[0].datasetIndex;

					$.ajax({
						url: 'home/getdata',
						type: 'POST',
						data: { locationId: locationId, type: type },
						success: function (result) {
							console.log(result);

							lineChart.data.labels = result.graphData.map(h => CleanText(result.country) + '\n' + CleanText(result.city) + '\n' + 'Time: ' + h.time + '\n' + 'Last update: ' + result.latestUpDateTime);
							lineChart.data.datasets[0].label = CleanText(result.label);
							lineChart.data.datasets[0].data = result.graphData.map(d => d.value);
							lineChart.data.datasets[0].borderWidth = 1;
							lineChart.update();

							chartCanvas.removeAttribute('hidden');
						},
						error: function (xhr, status, error) {
							console.error(error);
						}
					});
				}
			}
		}
	});

	var chartCanvas = document.getElementById('lineChart');

	const lineChart = new Chart(chartCanvas, {
		type: 'line',
		data: {
			labels: [],
			datasets: [{
				label: '',
				data: [],
				borderColor: 'blue',
				fill: false
			}]
		},
		options: {
			scales: {
				x: {
					ticks: {
						display: false
					}
				}
			}
		}
	});

	function CleanText(text) {
		return text.replace(/_/g, ' ');
	}
</script>